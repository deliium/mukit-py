#!/bin/bash

# Mukit Project Test Runner
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—Ö–∞
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_venv() {
    if [ ! -d "venv" ]; then
        print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make setup-backend"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ node_modules
check_node_modules() {
    if [ ! -d "frontend/node_modules" ]; then
        print_error "Node modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
        print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make setup-frontend"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend —Ç–µ—Å—Ç–æ–≤
run_backend_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Backend —Ç–µ—Å—Ç–æ–≤"
    
    check_venv
    
    cd backend
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source ../venv/bin/activate
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command_exists python; then
        print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    echo "–ó–∞–ø—É—Å–∫ pytest..."
    if python -m pytest tests/ -v --tb=short; then
        print_success "Backend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        BACKEND_EXIT_CODE=0
    else
        print_error "Backend —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        BACKEND_EXIT_CODE=1
    fi
    
    cd ..
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend —Ç–µ—Å—Ç–æ–≤
run_frontend_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Frontend —Ç–µ—Å—Ç–æ–≤"
    
    check_node_modules
    
    cd frontend
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command_exists npm; then
        print_error "npm –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    echo "–ó–∞–ø—É—Å–∫ Vitest..."
    if npm run test:run; then
        print_success "Frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        FRONTEND_EXIT_CODE=0
    else
        print_error "Frontend —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        FRONTEND_EXIT_CODE=1
    fi
    
    cd ..
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
run_tests_with_coverage() {
    print_header "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
    
    # Backend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    print_header "Backend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
    check_venv
    cd backend
    source ../venv/bin/activate
    
    if python -m pytest tests/ --cov=app --cov-report=html --cov-report=term --cov-report=xml; then
        print_success "Backend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        BACKEND_EXIT_CODE=0
    else
        print_error "Backend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        BACKEND_EXIT_CODE=1
    fi
    
    cd ..
    
    # Frontend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    print_header "Frontend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
    check_node_modules
    cd frontend
    
    if npm run test:run -- --coverage; then
        print_success "Frontend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        FRONTEND_EXIT_CODE=0
    else
        print_error "Frontend —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        FRONTEND_EXIT_CODE=1
    fi
    
    cd ..
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "Mukit Project Test Runner"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–Ø]"
    echo ""
    echo "–û–ü–¶–ò–ò:"
    echo "  backend     –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã"
    echo "  frontend    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã"
    echo "  coverage    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
    echo "  all         –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  $0 backend            # –¢–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã"
    echo "  $0 frontend           # –¢–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã"
    echo "  $0 coverage           # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    BACKEND_EXIT_CODE=0
    FRONTEND_EXIT_CODE=0
    TOTAL_TESTS=0
    PASSED_TESTS=0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    case "${1:-all}" in
        "backend")
            run_backend_tests
            TOTAL_TESTS=1
            if [ $BACKEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=1
            fi
            ;;
        "frontend")
            run_frontend_tests
            TOTAL_TESTS=1
            if [ $FRONTEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=1
            fi
            ;;
        "coverage")
            run_tests_with_coverage
            TOTAL_TESTS=2
            if [ $BACKEND_EXIT_CODE -eq 0 ] && [ $FRONTEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=2
            elif [ $BACKEND_EXIT_CODE -eq 0 ] || [ $FRONTEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=1
            fi
            ;;
        "all")
            run_backend_tests
            run_frontend_tests
            TOTAL_TESTS=2
            if [ $BACKEND_EXIT_CODE -eq 0 ] && [ $FRONTEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=2
            elif [ $BACKEND_EXIT_CODE -eq 0 ] || [ $FRONTEND_EXIT_CODE -eq 0 ]; then
                PASSED_TESTS=1
            fi
            ;;
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_header "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
    
    if [ $TOTAL_TESTS -eq $PASSED_TESTS ]; then
        print_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! ($PASSED_TESTS/$TOTAL_TESTS)"
        echo -e "${GREEN}üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!${NC}"
        exit 0
    else
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏! ($PASSED_TESTS/$TOTAL_TESTS)"
        echo -e "${RED}üí• –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫${NC}"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"

