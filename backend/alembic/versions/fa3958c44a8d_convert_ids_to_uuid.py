"""Convert IDs to UUID

Revision ID: fa3958c44a8d
Revises:
Create Date: 2025-10-27 22:39:59.414667

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "fa3958c44a8d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "blocks",
        "document_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "blocks",
        "parent_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "blocks",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "blocks",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "blocks",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_blocks_id", table_name="blocks")
    op.alter_column(
        "comment_threads",
        "document_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "comment_threads",
        "block_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "comment_threads",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('comment_threads_id_seq'::regclass)"),
    )
    op.alter_column(
        "comment_threads",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "comment_threads",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_comment_threads_id", table_name="comment_threads")
    op.alter_column(
        "comments",
        "thread_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "comments",
        "author_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "comments",
        "parent_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "comments",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "comments",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "comments",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_comments_id", table_name="comments")
    op.add_column(
        "document_versions", sa.Column("updated_at", sa.DateTime(), nullable=True)
    )
    op.alter_column(
        "document_versions",
        "document_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "content",
        existing_type=sa.TEXT(),
        type_=sa.JSON(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "author_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("ix_document_versions_id", table_name="document_versions")
    op.alter_column(
        "documents",
        "owner_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "documents",
        "workspace_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "documents",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "documents",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "documents",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_documents_id", table_name="documents")
    op.add_column("permissions", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("permissions", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.alter_column(
        "permissions",
        "document_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "permissions",
        "user_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "permissions",
        "granted_by",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index("ix_permissions_id", table_name="permissions")
    op.drop_column("permissions", "granted_at")
    op.alter_column(
        "users",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('users_id_seq'::regclass)"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_users_id", table_name="users")
    op.add_column(
        "workspace_members", sa.Column("created_at", sa.DateTime(), nullable=True)
    )
    op.add_column(
        "workspace_members", sa.Column("updated_at", sa.DateTime(), nullable=True)
    )
    op.alter_column(
        "workspace_members",
        "workspace_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "workspace_members",
        "user_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "workspace_members",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index("ix_workspace_members_id", table_name="workspace_members")
    op.drop_column("workspace_members", "joined_at")
    op.alter_column(
        "workspaces",
        "owner_id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "workspaces",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.UUID(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('workspaces_id_seq'::regclass)"),
    )
    op.alter_column(
        "workspaces",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "workspaces",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("ix_workspaces_id", table_name="workspaces")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("ix_workspaces_id", "workspaces", ["id"], unique=False)
    op.alter_column(
        "workspaces",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "workspaces",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "workspaces",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('workspaces_id_seq'::regclass)"),
    )
    op.alter_column(
        "workspaces",
        "owner_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.add_column(
        "workspace_members",
        sa.Column(
            "joined_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_index(
        "ix_workspace_members_id", "workspace_members", ["id"], unique=False
    )
    op.alter_column(
        "workspace_members",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "workspace_members",
        "user_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "workspace_members",
        "workspace_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.drop_column("workspace_members", "updated_at")
    op.drop_column("workspace_members", "created_at")
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.alter_column(
        "users",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('users_id_seq'::regclass)"),
    )
    op.add_column(
        "permissions",
        sa.Column(
            "granted_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_index("ix_permissions_id", "permissions", ["id"], unique=False)
    op.alter_column(
        "permissions",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "permissions",
        "expires_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "granted_by",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "user_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "permissions",
        "document_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.drop_column("permissions", "updated_at")
    op.drop_column("permissions", "created_at")
    op.create_index("ix_documents_id", "documents", ["id"], unique=False)
    op.alter_column(
        "documents",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "documents",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "documents",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "documents",
        "workspace_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "documents",
        "owner_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.create_index(
        "ix_document_versions_id", "document_versions", ["id"], unique=False
    )
    op.alter_column(
        "document_versions",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "document_versions",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "author_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "content",
        existing_type=sa.JSON(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "document_versions",
        "document_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.drop_column("document_versions", "updated_at")
    op.create_index("ix_comments_id", "comments", ["id"], unique=False)
    op.alter_column(
        "comments",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "comments",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "comments",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "comments",
        "parent_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "comments",
        "author_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "comments",
        "thread_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.create_index("ix_comment_threads_id", "comment_threads", ["id"], unique=False)
    op.alter_column(
        "comment_threads",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "comment_threads",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "comment_threads",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('comment_threads_id_seq'::regclass)"),
    )
    op.alter_column(
        "comment_threads",
        "block_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "comment_threads",
        "document_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.create_index("ix_blocks_id", "blocks", ["id"], unique=False)
    op.alter_column(
        "blocks",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "blocks",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "blocks",
        "id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "blocks",
        "parent_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "blocks",
        "document_id",
        existing_type=sa.UUID(),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
