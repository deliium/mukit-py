[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "PL", # pylint
    "RUF", # ruff-specific rules
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T10", # flake8-debugger
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "YTT", # flake8-2020
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "F403", # star imports (needed for alembic)
    "ERA001", # commented code (alembic templates)
    "PLC0415", # imports not at top level (websocket)
    "COM812", # trailing comma missing (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"alembic/versions/*.py" = ["E501", "ERA001"]
"alembic/env.py" = ["F403", "ERA001"]
"app/websocket/document_websocket.py" = ["PLC0415"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "jose.*",
    "passlib.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", "alembic/versions"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
